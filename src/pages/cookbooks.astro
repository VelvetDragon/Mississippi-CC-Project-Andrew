---
import Layout from '../layouts/Layout.astro';
import { getEntry } from 'astro:content';

const cookbooks = await getEntry('pages', 'cookbooks');
const { Content } = await cookbooks.render();
---

<Layout title="Cookbooks - Mississippi Community Cookbook Project">
  <!-- Hero Section with Background Image -->
  <section class="hero" data-bg="cookbooks">
    <div class="hero-overlay"></div>
    <div class="hero-content">
      <h1>{cookbooks.data.title}</h1>
    </div>
  </section>

  <div class="content">
    <div class="main-text">
      <Content />
    </div>

    <!-- Cookbook Inventory Section -->
    <section class="cookbook-inventory">
      <h2>Cookbook Inventory List</h2>
      <div class="inventory-intro">
        <p>What follows is a master list of community cookbooks published in Mississippi between 1890 and 1969. It is incomplete. I've excluded some items that I have been unable to date (currently no more than a dozen titles). I've also not included items that I have seen reference to but am not sure were ever published.</p>
        
        <p>Some of the dates listed are estimated, although even in these cases most are close to the actual date of publication. Some of the cookbooks I have not personally viewed yet. Most I have.</p>
        
        <p>If a cookbook is owned by Southern Miss, which holds the largest collection of Mississippi community cookbooks, I've listed it as USM (even if other locations have it). If Southern Miss has made it available online, it is listed as USM Online and linked to the source. Other large collections at Mississippi institutions are listed by abbreviations: UM is the University of Mississippi, MSU is Mississippi State University, and MDAH is the Mississippi Department of Archives and History. For all other institutions, I have provided a name. In some cases, it is possible I have listed a location that does not own the exact copy in the list, but generally I have tried to list the location that owns the listed edition or the oldest edition. If the location is listed as "Unknown", I have credible information that the cookbook exists (usually newspaper references) but have not located a copy.</p>
        
        <p>If you know of a cookbook that should be listed, please contact Andrew Haley at <a href="mailto:mscommunitycookbook@gmail.com">mscommunitycookbook@gmail.com</a>. If you have a copy of a cookbook that is not listed or is listed as "Unknown," please contact me. I would love to see it.</p>
      </div>

      <!-- Search and Filter Controls -->
      <div class="cookbook-controls">
        <div class="search-container">
          <input type="text" id="cookbookSearch" placeholder="Search cookbooks by title, author, community, or organization..." />
          <span class="search-icon">üîé</span>
            </div>
            
        <div class="filter-container">
          <select id="communityFilter">
            <option value="">All Communities</option>
          </select>
          
          <select id="organizationFilter">
            <option value="">All Organizations</option>
            <option value="Church">Church</option>
            <option value="Civic/Club">Civic/Club</option>
            <option value="Business/Professional">Business/Professional</option>
          </select>
          
          <select id="sourceFilter">
            <option value="">All Sources</option>
            <option value="USM">USM</option>
            <option value="USM Online">USM Online</option>
            <option value="UM">UM</option>
            <option value="MSU">MSU</option>
            <option value="MDAH">MDAH</option>
            <option value="Unknown">Unknown</option>
          </select>
          
          <select id="decadeFilter">
            <option value="">All Decades</option>
            <option value="1890s">1890s</option>
            <option value="1900s">1900s</option>
            <option value="1910s">1910s</option>
            <option value="1920s">1920s</option>
            <option value="1930s">1930s</option>
            <option value="1940s">1940s</option>
            <option value="1950s">1950s</option>
            <option value="1960s">1960s</option>
          </select>
        </div>
      </div>

      <!-- Results Info -->
      <div class="results-info">
        <span id="resultCount">Showing all cookbooks</span>
        <button id="clearFilters" class="clear-btn" style="display: none;">Clear All Filters</button>
        </div>

      <!-- Sort Controls -->
      <div class="sort-controls">
        <label for="sortSelect">Sort by:</label>
        <select id="sortSelect">
          <option value="title-asc">Title (A-Z)</option>
          <option value="title-desc">Title (Z-A)</option>
          <option value="date-desc">Date (Newest First)</option>
          <option value="date-asc">Date (Oldest First)</option>
          <option value="community-asc">Community (A-Z)</option>
          <option value="author-asc">Author (A-Z)</option>
        </select>
        </div>

      <!-- Museum Gallery Display -->
      <div class="cookbook-gallery" id="cookbookGallery">
        <!-- Cookbook artifacts will be populated by JavaScript -->
          </div>

      <!-- Pagination -->
      <div class="cookbook-pagination">
          <div class="pagination-info">
          <span id="cookbookPageInfo">Showing 1-50 of 350+ cookbooks</span>
        </div>
            <div class="pagination-controls">
          <button id="cookbookPrevBtn" class="page-btn" disabled>‚Üê Previous</button>
          <span id="cookbookPageNumbers" class="page-numbers"></span>
          <button id="cookbookNextBtn" class="page-btn">Next ‚Üí</button>
        </div>
      </div>
    </section>
  </div>
</Layout>

<style is:global>
  /* Hero Section */
  .hero {
    position: relative;
    height: 35vh;
    min-height: 300px;
    background-image: url('/images/cookbooks-bg.jpeg') !important;
    background-size: cover;
    background-position: center 30%;
    background-repeat: no-repeat;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1;
  }

  .hero-content {
    position: relative;
    z-index: 2;
    text-align: center;
    color: white;
  }

  .hero-content h1 {
    font-family: 'Playfair Display', serif;
    font-size: 4rem;
    font-weight: 600;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  /* Main Content */
  .content {
    max-width: 800px;
    margin: 0 auto;
    padding: 4rem 2rem;
  }

  .main-text {
    margin-bottom: 3rem;
  }

  .main-text p {
    font-size: 1.1rem;
    line-height: 1.7;
    color: var(--text-dark);
    margin-bottom: 1.5rem;
    text-align: left;
    font-weight: 400;
  }

  .main-text h2 {
    font-family: 'Playfair Display', serif;
    font-size: 1.8rem;
    color: var(--text-dark);
    margin-bottom: 1rem;
    margin-top: 2rem;
    font-weight: 600;
    text-align: left;
  }

  .main-text em {
    font-style: italic;
    color: var(--primary-color);
  }

  @media (max-width: 768px) {
    .hero-content h1 {
      font-size: 3rem;
    }
    
    .content {
      padding: 3rem 1rem;
    }

    .main-text p {
      font-size: 1rem;
    }
  }

  /* Cookbook Inventory Styles */
  .cookbook-inventory {
    margin-top: 3rem;
    padding-top: 2rem;
    width: 100%;
    max-width: 100%;
    overflow-x: hidden;
  }

  .cookbook-inventory h2 {
    font-family: 'Playfair Display', serif;
    font-size: 2rem;
    color: var(--text-dark);
    margin-bottom: 2rem;
    font-weight: 600;
    text-align: left;
  }

  .inventory-intro {
    margin-bottom: 3rem;
  }

  .inventory-intro p {
    font-size: 1.1rem;
    line-height: 1.7;
    color: var(--text-dark);
    margin-bottom: 1.5rem;
    text-align: left;
    font-weight: 400;
  }

  .inventory-intro p:last-child {
    margin-bottom: 0;
    font-weight: 400;
  }

  .inventory-intro a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 600;
  }

  .inventory-intro a:hover {
    text-decoration: underline;
  }

  /* Search and Filter Controls */
  .cookbook-controls {
    background: var(--surface);
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid var(--border);
    margin-bottom: 1.5rem;
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
  }

  .search-container {
    position: relative;
    margin-bottom: 1.5rem;
    width: 100%;
  }

  #cookbookSearch {
    width: 100%;
    max-width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    border: 2px solid var(--border);
    border-radius: 8px;
    font-size: 1rem;
    outline: none;
    transition: all 0.3s ease;
    box-sizing: border-box;
  }

  #cookbookSearch:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(200, 118, 61, 0.1);
  }

  .search-container .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.2rem;
    color: var(--text-muted);
    pointer-events: none;
  }

  .filter-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    width: 100%;
  }

  .filter-container select {
    padding: 0.75rem;
    border: 2px solid var(--border);
    border-radius: 8px;
    font-size: 0.9rem;
    background: white;
    color: var(--text-dark);
    outline: none;
    transition: all 0.3s ease;
    width: 100%;
    box-sizing: border-box;
  }

  .filter-container select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(200, 118, 61, 0.1);
  }

  /* Results Info */
  .results-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0.5rem 0;
  }

  #resultCount {
    font-weight: 500;
    color: var(--text-dark);
  }

  .clear-btn {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .clear-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
  }

  /* Sort Controls */
  .sort-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
  }

  .sort-controls label {
    font-weight: 500;
    color: var(--text-dark);
  }

  .sort-controls select {
    padding: 0.5rem 0.75rem;
    border: 2px solid var(--border);
    border-radius: 6px;
    font-size: 0.9rem;
    background: white;
    color: var(--text-dark);
    outline: none;
    transition: all 0.3s ease;
  }

  .sort-controls select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(200, 118, 61, 0.1);
  }

  /* Table-Style Layout */
  .cookbook-gallery {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 3rem;
  }

  .cookbook-artifact {
    background: #ffffff;
    border: 1px solid rgba(200, 118, 61, 0.2);
    border-radius: 6px;
    padding: 1rem 1.25rem;
    transition: all 0.3s ease;
    cursor: pointer;
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-areas: 
      "main date"
      "meta date";
    gap: 1rem;
    align-items: start;
    min-height: 80px;
    position: relative;
  }

  .cookbook-artifact:hover {
    border-color: var(--primary-color);
    box-shadow: 0 2px 12px rgba(200, 118, 61, 0.15);
    background: #fefefe;
  }

  .cookbook-main-info {
    grid-area: main;
    min-width: 0;
  }

  .cookbook-meta-info {
    grid-area: meta;
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
    align-items: center;
  }

  .cookbook-year-badge {
    grid-area: date;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    color: white;
    padding: 0.4rem 0.7rem;
    border-radius: 4px;
    font-weight: 600;
    font-size: 0.8rem;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    justify-self: end;
    align-self: start;
  }

  .cookbook-community-badge {
    background: rgba(200, 118, 61, 0.1);
    color: var(--primary-color);
    padding: 0.3rem 0.8rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    white-space: nowrap;
    border: 1px solid rgba(200, 118, 61, 0.2);
    text-align: center;
  }

  .cookbook-title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-dark);
    line-height: 1.3;
    margin-bottom: 0.25rem;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .cookbook-author {
    color: var(--text-muted);
    font-size: 0.85rem;
    font-style: italic;
    line-height: 1.2;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .cookbook-detail-label {
    font-size: 0.7rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--text-muted);
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .cookbook-detail-value {
    font-size: 0.95rem;
    color: var(--text-dark);
    font-weight: 600;
  }

  .cookbook-community {
    color: var(--primary-color);
  }

  .cookbook-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 1.25rem;
    border-top: 1px solid rgba(200, 118, 61, 0.1);
  }

  .cookbook-type-badge {
    padding: 0.3rem 0.6rem;
    border-radius: 3px;
    font-size: 0.7rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    white-space: nowrap;
    display: inline-block;
  }

  .cookbook-type-badge.church {
    background: #e8f5e8;
    color: #2d5016;
    border: 1px solid #c3e6c3;
  }

  .cookbook-type-badge.civicclub {
    background: #e6f3ff;
    color: #1a472a;
    border: 1px solid #b3d9ff;
  }

  .cookbook-type-badge.businessprofessional {
    background: #fff2e6;
    color: #8b4513;
    border: 1px solid #ffd9b3;
  }

  .cookbook-source-container {
    text-align: right;
  }

  .cookbook-source-tag {
    padding: 0.3rem 0.6rem;
    border-radius: 3px;
    font-size: 0.7rem;
    font-weight: 500;
    background: #f5f5f5;
    color: #666;
    text-decoration: none;
    border: 1px solid #ddd;
    transition: all 0.2s ease;
    white-space: nowrap;
    display: inline-block;
  }

  .cookbook-source-tag.usm-online {
    background: #e6f7ff;
    color: #0066cc;
    border: 1px solid #b3e0ff;
  }

  .cookbook-source-tag.usm-online::after {
    content: ' üîó';
    margin-left: 0.25rem;
  }

  .cookbook-source-tag.usm-online:hover {
    background: #cceeff;
    border-color: #66ccff;
  }

  .cookbook-source-tag.unknown {
    background: #f9f9f9;
    color: #999;
    border: 1px solid #e0e0e0;
  }

  /* Expanded View Modal */
  .cookbook-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .cookbook-modal.active {
    display: flex;
  }

  .cookbook-modal-content {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    max-width: 500px;
    width: 100%;
    max-height: 85vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .cookbook-modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: var(--text-muted);
    transition: color 0.3s ease;
  }

  .cookbook-modal-close:hover {
    color: var(--text-dark);
  }

  /* Pagination */
  .cookbook-pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 0;
    background: transparent;
  }

  .cookbook-pagination .pagination-info {
    font-weight: 500;
    color: var(--text-dark);
  }

  .cookbook-pagination .pagination-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .cookbook-pagination .page-btn {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .cookbook-pagination .page-btn:hover:not(:disabled) {
    background: var(--primary-dark);
    transform: translateY(-1px);
  }

  .cookbook-pagination .page-btn:disabled {
    background: var(--text-muted);
    cursor: not-allowed;
    opacity: 0.6;
  }

  .cookbook-pagination .page-numbers {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .cookbook-pagination .page-number {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    background: transparent;
    border: 1px solid var(--border);
    color: var(--text-dark);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
    min-width: 32px;
    text-align: center;
  }

  .cookbook-pagination .page-number:hover {
    background: rgba(200, 118, 61, 0.1);
    border-color: var(--primary-color);
  }

  .cookbook-pagination .page-number.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  .cookbook-pagination .page-ellipsis {
    color: var(--text-muted);
    padding: 0.25rem;
  }

  @media (max-width: 768px) {
    .cookbook-controls {
      padding: 1rem;
      margin-left: 0;
      margin-right: 0;
    }

    .search-container {
      margin-bottom: 1rem;
    }

    #cookbookSearch {
      padding: 0.875rem 0.875rem 0.875rem 2.5rem;
      font-size: 0.9rem;
    }

    .search-container .search-icon {
      left: 0.875rem;
      font-size: 1rem;
    }

    .filter-container {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }

    .filter-container select {
      padding: 0.625rem;
      font-size: 0.85rem;
    }

    .cookbook-gallery {
      gap: 0.75rem;
    }

    .cookbook-artifact {
      grid-template-columns: 1fr;
      grid-template-areas: 
        "main"
        "date"
        "meta";
      gap: 0.75rem;
      padding: 1rem;
      text-align: left;
    }

    .cookbook-meta-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .cookbook-year-badge {
      justify-self: start;
    }

    .cookbook-cover {
      height: 160px;
    }

    .cookbook-content {
      padding: 1.5rem;
    }

    .cookbook-details {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .sort-controls {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .sort-controls select {
      width: 100%;
    }

    .results-info {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .cookbook-pagination {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .cookbook-pagination .pagination-controls {
      flex-direction: column;
      gap: 1rem;
    }

    .cookbook-pagination .page-numbers {
      order: -1;
    }

    .cookbook-pagination .page-btn {
      width: 100%;
      max-width: 150px;
    }
  }

  @media (max-width: 480px) {
    .hero {
      height: 40vh;
      min-height: 250px;
    }

    .hero-content h1 {
      font-size: 2.5rem;
    }

    .cookbook-inventory h2 {
      font-size: 1.6rem;
    }

    .inventory-intro {
      padding: 1.5rem;
    }

    .cookbook-controls {
      padding: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    let cookbooks = [];

    // Load cookbook data from JSON file
    async function loadCookbooks() {
      try {
        const response = await fetch('/cookbooks.json');
        if (!response.ok) {
          throw new Error('Failed to load cookbooks data');
        }
        cookbooks = await response.json();
        
        // Initialize filtered cookbooks and the app after data is loaded
        filteredCookbooks = [...cookbooks];
        init();
      } catch (error) {
        console.error('Error loading cookbooks:', error);
        // Fallback to sample data if JSON file fails to load
        cookbooks = [
          {
            title: "\"It's\" the Best & Proven Way Cookbook",
            author: "Meridian Business and Professional Women's",
            date: "1960",
            community: "Meridian",
            organization: "Business/Professional",
            source: "MDAH",
            website: ""
          },
          {
            title: "\"The Best in Cooking\" in Bolivar County",
            author: "Duncan Academy Patron's League (Duncan, Miss.)",
            date: "1966",
            community: "Duncan",
            organization: "Civic/Club",
            source: "USM Online",
            website: "https://usm.access.preservica.com/uncategorized/IO_74c89589-6db7-4b7b-9e4b-d09de8a95d2d/"
          }
        ];
        filteredCookbooks = [...cookbooks];
        init();
      }
    }

    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 50;
    let filteredCookbooks = [];
    let currentSort = { field: null, direction: 'asc' };

    // DOM elements
    const searchInput = document.getElementById('cookbookSearch');
    const communityFilter = document.getElementById('communityFilter');
    const organizationFilter = document.getElementById('organizationFilter');
    const sourceFilter = document.getElementById('sourceFilter');
    const decadeFilter = document.getElementById('decadeFilter');
    const sortSelect = document.getElementById('sortSelect');
    const clearFiltersBtn = document.getElementById('clearFilters');
    const resultCount = document.getElementById('resultCount');
    const cookbookGallery = document.getElementById('cookbookGallery');
    const prevBtn = document.getElementById('cookbookPrevBtn');
    const nextBtn = document.getElementById('cookbookNextBtn');
    const pageInfo = document.getElementById('cookbookPageInfo');
    const pageNumbers = document.getElementById('cookbookPageNumbers');

    // Initialize
    function init() {
      populateFilters();
      renderGrid();
      setupEventListeners();
    }

    // Populate filter dropdowns
    function populateFilters() {
      // Populate communities - use correct field name from JSON
      const communities = [...new Set(cookbooks.map(book => book.Community))].sort();
      communities.forEach(community => {
        const option = document.createElement('option');
        option.value = community;
        option.textContent = community;
        communityFilter.appendChild(option);
      });
    }

    // Setup event listeners
    function setupEventListeners() {
      searchInput.addEventListener('input', handleSearch);
      communityFilter.addEventListener('change', handleFilter);
      organizationFilter.addEventListener('change', handleFilter);
      sourceFilter.addEventListener('change', handleFilter);
      decadeFilter.addEventListener('change', handleFilter);
      sortSelect.addEventListener('change', handleSort);
      clearFiltersBtn.addEventListener('click', clearFilters);

      // Pagination
      prevBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          renderGrid();
        }
      });

      nextBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(filteredCookbooks.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderGrid();
        }
      });
    }

    // Handle search
    function handleSearch() {
      const query = searchInput.value.toLowerCase();
      applyFilters();
    }

    // Handle filters
    function handleFilter() {
      applyFilters();
    }

    // Apply all filters
    function applyFilters() {
      const searchQuery = searchInput.value.toLowerCase();
      const communityValue = communityFilter.value;
      const organizationValue = organizationFilter.value;
      const sourceValue = sourceFilter.value;
      const decadeValue = decadeFilter.value;

      filteredCookbooks = cookbooks.filter(book => {
        // Search filter - use correct field names from JSON
        const matchesSearch = !searchQuery || 
          book.Title.toLowerCase().includes(searchQuery) ||
          book.Author.toLowerCase().includes(searchQuery) ||
          book.Community.toLowerCase().includes(searchQuery) ||
          book['Organization (Church, Civic/Club, Business/Professional)'].toLowerCase().includes(searchQuery);

        // Community filter
        const matchesCommunity = !communityValue || book.Community === communityValue;

        // Organization filter  
        const orgField = book['Organization (Church, Civic/Club, Business/Professional)'];
        const matchesOrganization = !organizationValue || 
          (organizationValue === 'Church' && orgField === 'Church') ||
          (organizationValue === 'Civic/Club' && orgField === 'Civic/Club') ||
          (organizationValue === 'Business/Professional' && orgField === 'Business/Professional');

        // Source filter
        const matchesSource = !sourceValue || book.Source === sourceValue;

        // Decade filter
        const matchesDecade = !decadeValue || getDecade(book.Date) === decadeValue;

        return matchesSearch && matchesCommunity && matchesOrganization && matchesSource && matchesDecade;
      });

      currentPage = 1;
      renderGrid();
      updateFilterState();
    }

    // Get decade from date
    function getDecade(date) {
      if (!date) return '';
      const year = parseInt(date);
      if (isNaN(year)) return '';
      return Math.floor(year / 10) * 10 + 's';
    }

    // Update filter state
    function updateFilterState() {
      const hasFilters = searchInput.value || 
        communityFilter.value || 
        organizationFilter.value || 
        sourceFilter.value || 
        decadeFilter.value;

      clearFiltersBtn.style.display = hasFilters ? 'block' : 'none';
      
      const count = filteredCookbooks.length;
      resultCount.textContent = hasFilters ? 
        `Showing ${count} filtered results` : 
        `Showing all ${count} cookbooks`;
    }

    // Clear all filters
    function clearFilters() {
      searchInput.value = '';
      communityFilter.value = '';
      organizationFilter.value = '';
      sourceFilter.value = '';
      decadeFilter.value = '';
      applyFilters();
    }

    // Handle sorting
    function handleSort() {
      const sortValue = sortSelect.value;
      const [field, direction] = sortValue.split('-');
      
      currentSort.field = field;
      currentSort.direction = direction;

      // Sort data - use correct field names from JSON
      filteredCookbooks.sort((a, b) => {
        let aValue, bValue;
        
        switch(field) {
          case 'title':
            aValue = a.Title || '';
            bValue = b.Title || '';
            break;
          case 'author':
            aValue = a.Author || '';
            bValue = b.Author || '';
            break;
          case 'date':
            aValue = parseInt(a.Date) || 0;
            bValue = parseInt(b.Date) || 0;
            break;
          case 'community':
            aValue = a.Community || '';
            bValue = b.Community || '';
            break;
          default:
            aValue = '';
            bValue = '';
        }

        if (field === 'date') {
          if (aValue < bValue) return direction === 'asc' ? -1 : 1;
          if (aValue > bValue) return direction === 'asc' ? 1 : -1;
          return 0;
        } else {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
          if (aValue < bValue) return direction === 'asc' ? -1 : 1;
          if (aValue > bValue) return direction === 'asc' ? 1 : -1;
          return 0;
        }
      });

      currentPage = 1;
      renderGrid();
    }

    // Render gallery
    function renderGrid() {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const pageData = filteredCookbooks.slice(startIndex, endIndex);

      cookbookGallery.innerHTML = pageData.map(book => createCookbookArtifact(book)).join('');
      updatePagination();
    }

    // Create cookbook artifact - improved layout
    function createCookbookArtifact(book) {
      const orgField = book['Organization (Church, Civic/Club, Business/Professional)'] || '';
      const typeClass = orgField.toLowerCase().replace('/', '').replace(' ', '');
      
      let sourceDisplay = book.Source;
      
      if (book.Source === 'USM Online' && book.Website) {
        sourceDisplay = `<a href="${book.Website}" target="_blank" class="cookbook-source-tag usm-online">${book.Source}</a>`;
      } else if (book.Source === 'Unknown') {
        sourceDisplay = `<span class="cookbook-source-tag unknown">${book.Source}</span>`;
      } else {
        sourceDisplay = `<span class="cookbook-source-tag">${book.Source}</span>`;
      }

      return `
        <div class="cookbook-artifact" onclick="openCookbookModal(${JSON.stringify(book).replace(/"/g, '&quot;')})">
          <div class="cookbook-main-info">
            <div class="cookbook-title">${book.Title}</div>
            <div class="cookbook-author">${book.Author}</div>
          </div>
          
          <div class="cookbook-year-badge">${book.Date || 'Unknown'}</div>
          
          <div class="cookbook-meta-info">
            <div class="cookbook-community-badge">${book.Community}</div>
            <span class="cookbook-type-badge ${typeClass}">${orgField}</span>
            ${sourceDisplay}
          </div>
        </div>
      `;
    }

    // Update pagination
    function updatePagination() {
      const totalItems = filteredCookbooks.length;
      const totalPages = Math.ceil(totalItems / itemsPerPage);
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, totalItems);

      pageInfo.textContent = `Showing ${startIndex + 1}-${endIndex} of ${totalItems} cookbooks`;

      prevBtn.disabled = currentPage === 1;
      nextBtn.disabled = currentPage === totalPages || totalPages === 0;

      generatePageNumbers(totalPages);
    }

    // Generate page numbers
    function generatePageNumbers(totalPages) {
      pageNumbers.innerHTML = '';
      
      if (totalPages <= 1) return;

      const maxVisible = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
      let endPage = Math.min(totalPages, startPage + maxVisible - 1);

      if (endPage - startPage + 1 < maxVisible) {
        startPage = Math.max(1, endPage - maxVisible + 1);
      }

      // Add first page and ellipsis if needed
      if (startPage > 1) {
        addPageButton(1);
        if (startPage > 2) {
          const ellipsis = document.createElement('span');
          ellipsis.className = 'page-ellipsis';
          ellipsis.textContent = '...';
          pageNumbers.appendChild(ellipsis);
        }
      }

      // Add visible page numbers
      for (let i = startPage; i <= endPage; i++) {
        addPageButton(i);
      }

      // Add ellipsis and last page if needed
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement('span');
          ellipsis.className = 'page-ellipsis';
          ellipsis.textContent = '...';
          pageNumbers.appendChild(ellipsis);
        }
        addPageButton(totalPages);
      }
    }

    // Add page button
    function addPageButton(pageNum) {
      const button = document.createElement('span');
      button.className = `page-number ${pageNum === currentPage ? 'active' : ''}`;
      button.textContent = pageNum;
      button.addEventListener('click', () => {
        currentPage = pageNum;
        renderGrid();
      });
      pageNumbers.appendChild(button);
    }

    // Cookbook modal functions
    window.openCookbookModal = function(book) {
      const modal = document.createElement('div');
      modal.className = 'cookbook-modal active';
      
      const orgField = book['Organization (Church, Civic/Club, Business/Professional)'] || '';
      const typeClass = orgField.toLowerCase().replace('/', '').replace(' ', '');
      
      modal.innerHTML = `
        <div class="cookbook-modal-content">
          <button class="cookbook-modal-close" onclick="closeCookbookModal()">&times;</button>
          
          <div class="modal-header" style="margin-bottom: 1.5rem;">
            <h2 style="font-size: 1.4rem; margin-bottom: 0.5rem; line-height: 1.3; color: var(--text-dark);">${book.Title}</h2>
            <p style="font-size: 1rem; font-style: italic; color: var(--text-muted); margin-bottom: 1rem;">${book.Author}</p>
            
            <div style="display: flex; gap: 0.75rem; flex-wrap: wrap; align-items: center;">
              <div class="cookbook-year-badge">${book.Date || 'Unknown'}</div>
              <div class="cookbook-community-badge">${book.Community}</div>
              <span class="cookbook-type-badge ${typeClass}">${orgField}</span>
            </div>
          </div>
          
          <div class="modal-details" style="display: grid; gap: 1rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: var(--surface); border-radius: 6px;">
              <span style="font-weight: 500; color: var(--text-dark);">Source:</span>
              <span style="color: var(--text-muted);">${book.Source}</span>
            </div>
            
            ${book.Website ? `
              <div style="text-align: center; padding: 1rem; background: #f8f9fa; border-radius: 6px;">
                <a href="${book.Website}" target="_blank" class="cookbook-source-tag usm-online" style="padding: 0.75rem 1.5rem; font-size: 0.9rem;">View Online</a>
              </div>
            ` : ''}
          </div>
        </div>
      `;
      document.body.appendChild(modal);
    };

    window.closeCookbookModal = function() {
      const modal = document.querySelector('.cookbook-modal');
      if (modal) {
        modal.remove();
      }
    };

    // Close modal on outside click
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('cookbook-modal')) {
        closeCookbookModal();
      }
    });

    // Load cookbooks data and initialize
    loadCookbooks();
  });
</script> 