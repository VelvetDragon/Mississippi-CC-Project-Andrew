---
import Layout from '../layouts/Layout.astro';
import { getRecentBlogs, getPastBlogs } from '../data/blogs.js';

const currentDate = '2025-09-09'; // Current date
const recentBlogs = getRecentBlogs(currentDate);
const pastBlogs = getPastBlogs(currentDate);
const pastBlogsToShow = pastBlogs.slice(0, 6); // Show 6 past blogs initially
const hasMorePastBlogs = pastBlogs.length > 6;
---

<Layout title="Culinary Tales - Mississippi Community Cookbook Project">
  <!-- Hero Section with Background Image -->
  <section class="hero" data-bg="tales">
    <div class="hero-overlay"></div>
    <div class="hero-content">
      <h1>Culinary Tales</h1>
    </div>
  </section>

  <div class="content">
    <div class="intro-text">
      <p>Cookbooks tell stories. The best of these, if all goes according to plan, will appear in my forthcoming book on community cookbooks. However, I am constantly finding stories that I would love to share and when I have time I will add some to the blog.</p>
    </div>

    <div class="blog-container">
      <!-- Coming Soon Section -->
      <section class="coming-soon">
        <h2 class="section-title">Coming Soon</h2>
        <div class="coming-soon-content">
          <p>New culinary tales from the Mississippi Community Cookbook Project archives are coming next week! Professor Haley is preparing fascinating stories that reveal the hidden narratives within our community cookbook collection.</p>
          <p>These upcoming stories will explore:</p>
          <ul>
            <li>Discoveries from recent archival research</li>
            <li>Stories of community and tradition</li>
            <li>Insights into Mississippi's culinary heritage</li>
            <li>Hidden narratives within historical cookbooks</li>
          </ul>
          <div class="coming-soon-note">
            <p><em>Stories will be published as they become available. Check back regularly for new content!</em></p>
          </div>
        </div>
      </section>
    </div>
  </div>
</Layout>

<style>
  /* Hero Section */
  .hero {
    position: relative;
    height: 35vh;
    min-height: 300px;
    background-image: url('/images/tales-bg.jpeg') !important;
    background-size: cover;
    background-position: center 15%;
    background-repeat: no-repeat;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1;
  }

  .hero-content {
    position: relative;
    z-index: 2;
    text-align: center;
    color: white;
  }

  .hero-content h1 {
    font-family: 'Playfair Display', serif;
    font-size: 4rem;
    font-weight: 600;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  /* Content */
  .content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 4rem 2rem;
  }

  .intro-text {
    text-align: center;
    max-width: 800px;
    margin: 0 auto 4rem auto;
  }

  .intro-text p {
    font-size: 1.1rem;
    line-height: 1.7;
    color: var(--text-muted);
  }

  .blog-container {
    max-width: 1000px;
    margin: 0 auto;
  }

  .section-title {
    font-family: 'Playfair Display', serif;
    font-size: 2.5rem;
    font-weight: 600;
    color: var(--text-dark);
    text-align: center;
    margin-bottom: 3rem;
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 2px;
  }

  /* Featured Post */
  .blog-post.featured {
    background: linear-gradient(135deg, var(--surface) 0%, rgba(200, 118, 61, 0.02) 100%);
    padding: 3rem;
    border-radius: 20px;
    border: 1px solid var(--border);
    margin-bottom: 4rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  }

  .blog-post.featured .post-title {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  /* Blog Grid */
  .blog-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .blog-post {
    background: var(--surface);
    padding: 2rem;
    border-radius: 16px;
    border: 1px solid var(--border);
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.03);
  }

  .blog-post:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    border-color: var(--primary-color);
  }

  .post-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.85rem;
  }

  .date {
    color: var(--text-muted);
  }

  .category {
    color: var(--primary-color);
    font-weight: 600;
  }

  .post-title {
    font-family: 'Playfair Display', serif;
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .post-excerpt {
    color: var(--text-muted);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .read-more {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 600;
    font-size: 0.9rem;
    transition: all 0.3s ease;
  }

  .read-more:hover {
    color: var(--primary-dark);
    text-decoration: underline;
  }

  /* Load More Button */
  .load-more-container {
    text-align: center;
    margin-top: 3rem;
  }

  .load-more-btn {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(200, 118, 61, 0.2);
  }

  .load-more-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(200, 118, 61, 0.3);
  }

  /* Coming Soon Section */
  .coming-soon {
    margin-top: 4rem;
    background: linear-gradient(135deg, var(--surface) 0%, rgba(200, 118, 61, 0.02) 100%);
    padding: 3rem;
    border-radius: 20px;
    border: 1px solid var(--border);
  }

  .coming-soon-content {
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
  }

  .coming-soon-content p {
    font-size: 1.1rem;
    line-height: 1.7;
    color: var(--text-muted);
    margin-bottom: 1.5rem;
  }

  .coming-soon-content ul {
    list-style: none;
    padding: 0;
    max-width: 400px;
    margin: 0 auto;
  }

  .coming-soon-content li {
    padding: 0.5rem 0;
    color: var(--text-muted);
    position: relative;
    padding-left: 1.5rem;
  }

  .coming-soon-content li::before {
    content: 'â€¢';
    color: var(--primary-color);
    font-weight: bold;
    position: absolute;
    left: 0;
  }

  .coming-soon-note {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(200, 118, 61, 0.2);
  }

  .coming-soon-note p {
    font-size: 1rem;
    color: var(--primary-color);
    font-style: italic;
  }

  /* Sections Spacing */
  .recent-stories {
    margin-bottom: 4rem;
  }

  .past-blogs {
    margin-bottom: 2rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .hero-content h1 {
      font-size: 2.5rem;
    }

    .content {
      padding: 2rem 1rem;
    }

    .blog-post.featured {
      padding: 2rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .blog-grid {
      grid-template-columns: 1fr;
    }

    .coming-soon {
      padding: 2rem;
      margin-top: 3rem;
    }

    .load-more-btn {
      padding: 0.875rem 1.5rem;
      font-size: 0.9rem;
    }
  }
</style>

<script>
  // Load more blogs functionality
  let currentPage = 1;
  const blogsPerPage = 6;

  async function loadMoreBlogs() {
    try {
      // This would typically fetch from an API, but for now we'll use client-side pagination
      // In a real implementation, you'd fetch more blogs from your backend
      const loadMoreBtn = document.querySelector('.load-more-btn');
      loadMoreBtn.textContent = 'Loading...';
      loadMoreBtn.disabled = true;

      // Simulate loading delay
      await new Promise(resolve => setTimeout(resolve, 500));

      // For now, just hide the button since we're showing all available past blogs
      loadMoreBtn.style.display = 'none';
      
      // In a real implementation, you would:
      // 1. Fetch more blogs from your API
      // 2. Append them to the blog grid
      // 3. Update the button state based on whether there are more blogs
      
    } catch (error) {
      console.error('Error loading more blogs:', error);
      const loadMoreBtn = document.querySelector('.load-more-btn');
      loadMoreBtn.textContent = 'Try Again';
      loadMoreBtn.disabled = false;
    }
  }

  // Make function globally available
  window.loadMoreBlogs = loadMoreBlogs;
</script> 